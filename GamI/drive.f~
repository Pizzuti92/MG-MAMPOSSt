From MESIOA!FORETS Mon Apr  8 17:48:18 1991
Return-Path: <MESIOA!FORETS>
Received: by mesuna.noname (4.1/SMI-4.0)
	id AA19187; Mon, 8 Apr 91 17:48:16 +0200
Date: Mon, 8 Apr 91 17:48:16 +0200
Message-Id: <9104081548.AA19187@mesuna.noname>
Received: by DniMail (v1.0); Mon Apr  8 17:47:45 1991 MET DST
From: mesuna!'MESIOA!FORETS      '
To: MAMON
Subject: Gear routine
Status: R

C*********************************************************************
C*********************************************************************
      SUBROUTINE DRIVE (N, T0, H0, Y0, TOUT, EPS, MF, INDEX)
C*********************************************************************
C*********************************************************************
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C        THIS IS THE JANUARY 13, 1975 VERSION OF
C        GEAR, A PACKAGE FOR THE SOLUTION OF THE INITIAL VALUE
C        PROBLEM FOR SYSTEMS OF ORDINARY DIFFERENTIAL EQUATIONS,
C                  DY/DT = F(Y,T),    Y = (Y(1),Y(2),...,Y(N)).
C        SUBROUTINE DRIVE IS A DRIVER ROUTINE FOR THE GEAR PACKAGE.
C
C                       REFERENCES
C       1.  A. C. HINDMARSH, GEAR.. ORDINARY DIFFERENTIAL EQUATION
C             SYSTEM SOLVER, UCID-30001 REV. 3, LAWRENCE LIVERMORE
C             LABORATORY, P.O.BOX 808, LIVERMORE, CA 94550, DEC. 1974.
C
C       2.  A. C. HINDMARSH, LINEAR MULTISTEP METHODS FOR ORDINARY
C             DIFFERENTIAL EQUATIONS.. METHOD FORMULATIONS,
C             STABILITY, AND THE METHODS OF NORDSIECK AND GEAR,
C             UCRL-51186 REV. 1, L.L.L., MARCH 1972.
C
C       3.  A. C. HINDMARSH, CONSTRUCTION OF MATHEMATICAL SOFTWARE,
C             PART III.. THE CONTROL OF ERROR IN THE GEAR PACKAGE
C             FOR ORDINARY DIFFERENTIAL EQUATIONS, UCID-30050 PART 3,
C             L.L.L., AUGUST 1972.
C
C-----------------------------------------------------------------------
C  THE ORIGINAL VERSION OF THIS PROGRAM WAS WRITTEN AT LLL BY
C  A. C. HINDMARSH FOR CDC COMPUTERS.  THE CDC VERSION WAS MODIFIED
C  FOR USE ON IBM COMPUTERS IN DOUBLE PRECISION AT ARGONNE
C  NATIONAL LABORATORY IN JANUARY 1975.
C-----------------------------------------------------------------------
C  DRIVE IS TO BE CALLED ONCE FOR EACH OUTPUT VALUE OF T, AND
C  IN TURN MAKES REPEATED CALLS TO THE CORE INTEGRATOR, STIFF.
C
C  THE INPUT PARAMETERS ARE..
C    N     =  THE NUMBER OF FIRST-ORDER DIFFERENTIAL EQUATIONS.
C               N CAN BE REDUCED, BUT NEVER INCREASED, DURING A PROBLEM.
C    T0    =  THE INITIAL VALUE OF T, THE INDEPENDENT VARIABLE
C               (USED ONLY ON FIRST CALL).
C    H0    =  THE NEXT STEP SIZE IN T (USED FOR INPUT ONLY ON THE
C               FIRST CALL).
C    Y0    =  A VECTOR OF LENGTH N CONTAINING THE INITIAL VALUES OF
C               Y (USED FOR INPUT ONLY ON FIRST CALL).
C    TOUT  =  THE VALUE OF T AT WHICH OUTPUT IS DESIRED NEXT.
C               INTEGRATION WILL NORMALLY GO SLIGHTLY BEYOND TOUT
C               AND THE PACKAGE WILL INTERPOLATE TO T = TOUT.
C    EPS   =  THE RELATIVE ERROR BOUND  (USED ONLY ON THE
C               FIRST CALL, UNLESS INDEX = -1).  SINGLE STEP ERROR
C               ESTIMATES DIVIDED BY YMAX(I) WILL BE KEPT LESS THAN
C               EPS IN ROOT-MEAN-SQUARE NORM (I.E. EUCLIDEAN NORM
C               DIVIDED BY DSQRT(N) ).  THE VECTOR YMAX OF
C               WEIGHTS IS COMPUTED IN DRIVE.  INITIALLY YMAX(I) IS
C               DABS(Y(I)), WITH A DEFAULT VALUE OF 1 IF Y(I) = 0
C               INITIALLY.  THEREAFTER, YMAX(I) IS THE LARGEST VALUE
C               OF DABS(Y(I)) SEEN SO FAR, OR THE INITIAL YMAX(I) IF
C               THAT IS LARGER.  TO ALTER EITHER OF THESE, CHANGE THE
C               APPROPRIATE STATEMENTS IN THE DO-LOOPS ENDING AT
C               STATEMENTS 10 AND 70 BELOW.
C    MF    =  THE METHOD FLAG  (USED ONLY ON FIRST CALL, UNLESS
C               INDEX = -1).  ALLOWED VALUES ARE 10, 11, 12, 13,
C               20, 21, 22, 23.  MF HAS TWO DECIMAL DIGITS, METH
C               AND MITER  (MF = 10*METH + MITER).
C               METH IS THE BASIC METHOD INDICATOR..
C                 METH = 1  MEANS THE ADAMS METHODS.
C                 METH = 2  MEANS THE STIFF METHODS OF GEAR, OR THE
C                           BACKWARD DIFFERENTIATION FORMULAS.
C               MITER IS THE ITERATION METHOD INDICATOR..
C                 MITER = 0 MEANS FUNCTIONAL ITERATION (NO PARTIAL
C                           DERIVATIVES NEEDED).
C                 MITER = 1 MEANS CHORD METHOD WITH ANALYTIC JACOBIAN.
C                           FOR THIS USER SUPPLIES SUBROUTINE
C                           PEDERV  (SEE DESCRIPTION BELOW).
C                 MITER = 2 MEANS CHORD METHOD WITH JACOBIAN CALCULATED
C                           INTERNALLY BY FINITE DIFFERENCES.
C                 MITER = 3 MEANS CHORD METHOD WITH JACOBIAN REPLACED
C                           BY A DIAGONAL APPROXIMATION BASED ON A
C                           DIRECTIONAL DERIVATIVE.
C    INDEX =  INTEGER USED ON INPUT TO INDICATE TYPE OF CALL,
C               WITH THE FOLLOWING VALUES AND MEANINGS..
C                  1    THIS IS THE FIRST CALL FOR THIS PROBLEM.
C                  0    THIS IS NOT THE FIRST CALL FOR THIS PROBLEM,
C                       AND INTEGRATION IS TO CONTINUE.
C                 -1    THIS IS NOT THE FIRST CALL FOR THE PROBLEM,
C                       AND THE USER HAS RESET N, EPS, AND/OR MF.
C                  2    SAME AS 0 EXCEPT THAT TOUT IS TO BE HIT
C                       EXACTLY (NO INTERPOLATION IS DONE).
C                       ASSUMES TOUT .GE. THE CURRENT T.
C                  3    SAME AS 0 EXCEPT CONTROL RETURNS TO CALLING
C                       PROGRAM AFTER ONE STEP.  TOUT IS IGNORED.
C               SINCE THE NORMAL OUTPUT VALUE OF INDEX IS 0,
C               IT NEED NOT BE RESET FOR NORMAL CONTINUATION.
C
C  AFTER THE INITIAL CALL, IF A NORMAL RETURN OCCURRED AND A NORMAL
C  CONTINUATION IS DESIRED, SIMPLY RESET TOUT AND CALL AGAIN.
C  ALL OTHER PARAMETERS WILL BE READY FOR THE NEXT CALL.
C  A CHANGE OF PARAMETERS WITH INDEX = -1 CAN BE MADE AFTER
C  EITHER A SUCCESSFUL OR AN UNSUCCESSFUL RETURN.
C
C  THE OUTPUT PARAMETERS ARE..
C    H0    =  THE STEP SIZE H USED LAST, WHETHER SUCCESSFULLY OR NOT.
C    Y0    =  THE COMPUTED VALUES OF Y AT T = TOUT.
C    TOUT  =  THE OUTPUT VALUE OF T.  IF INTEGRATION WAS SUCCESSFUL,
C               AND THE INPUT VALUE OF INDEX WAS NOT 3, TOUT IS
C               UNCHANGED FROM ITS INPUT VALUE.  OTHERWISE, TOUT
C               IS THE CURRENT VALUE OF T TO WHICH INTEGRATION
C               HAS BEEN COMPLETED.
C    INDEX =  INTEGER USED ON OUTPUT TO INDICATE RESULTS,
C               WITH THE FOLLOWING VALUES AND MEANINGS..
C          0    INTEGRATION WAS COMPLETED TO TOUT OR BEYOND.
C         -1    THE INTEGRATION WAS HALTED AFTER FAILING TO PASS THE
C               ERROR TEST EVEN AFTER REDUCING H BY A FACTOR OF
C               1.E10 FROM ITS INITIAL VALUE.
C         -2    AFTER SOME INITIAL SUCCESS, THE INTEGRATION WAS
C               HALTED EITHER BY REPEATED ERROR TEST FAILURES OR BY
C               A TEST ON EPS.  TOO MUCH ACCURACY HAS BEEN REQUESTED.
C         -3    THE INTEGRATION WAS HALTED AFTER FAILING TO ACHIEVE
C               CORRECTOR CONVERGENCE EVEN AFTER REDUCING H BY A
C               FACTOR OF 1.E10 FROM ITS INITIAL VALUE.
C         -4    IMMEDIATE HALT BECAUSE OF ILLEGAL VALUES OF INPUT
C               PARAMETERS.  SEE PRINTED MESSAGE.
C         -5    INDEX WAS -1 ON INPUT, BUT THE DESIRED CHANGES OF
C               PARAMETERS WERE NOT IMPLEMENTED BECAUSE TOUT
C               WAS NOT BEYOND T.  INTERPOLATION TO T = TOUT WAS
C               PERFORMED AS ON A NORMAL RETURN.  TO TRY AGAIN,
C               SIMPLY CALL AGAIN WITH INDEX = -1 AND A NEW TOUT.
C
C   IN ADDITION TO DRIVE, THE FOLLOWING ROUTINES ARE PROVIDED IN
C   THE PACKAGE..
C     INTERP(TOUT,Y,N0,Y0)  INTERPOLATES TO GET THE OUTPUT VALUES
C                           AT T = TOUT, FROM THE DATA IN THE Y ARRAY.
C     STIFF(Y,N0)  IS THE CORE INTEGRATOR ROUTINE.  IT PERFORMS A
C                           SINGLE STEP AND ASSOCIATED ERROR CONTROL.
C     COSET(METH,NQ,EL,TQ,MAXDER)  SETS COEFFICIENTS FOR USE IN
C                           THE CORE INTEGRATOR.
C     PSET(Y,N0,CON,MITER,IER)  COMPUTES AND PROCESSES THE JACOBIAN
C                           MATRIX J = DF/DY.
C     DEC(N,N0,A,IP,IER)  PERFORMS AN LU DECOMPOSITION ON A MATRIX.
C     SOL(N,N0,A,B,IP)  SOLVES LINEAR SYSTEMS A*X = B AFTER DEC
C                           HAS BEEN CALLED FOR THE MATRIX A.
C   NOTE.. PSET, DEC, AND SOL ARE CALLED ONLY IF MITER = 1 OR 2.
C
C   THE FOLLOWING ROUTINES ARE TO BE SUPPLIED BY THE USER..
C     DIFFUN(N,T,Y,YDOT)  COMPUTES THE FUNCTION YDOT = F(Y,T), THE
C                           RIGHT-HAND SIDE OF THE O.D.E.
C                           HERE Y AND YDOT ARE VECTORS OF LENGTH N.
C     PEDERV(N,T,Y,PD,N0)  COMPUTES THE N BY N JACOBIAN MATRIX OF
C                           PARTIAL DERIVATIVES, AND STORES IT IN PD
C                           AS AN N0 BY N0 ARRAY.  PD(I,J) IS TO BE
C                           SET TO THE PARTIAL DERIVATIVE OF YDOT(I)
C                           WITH RESPECT TO Y(J).  PEDERV IS CALLED
C                           ONLY IF MITER = 1.  OTHERWISE A DUMMY
C                           ROUTINE CAN BE SUBSTITUTED.
C
C  THE DIMENSIONS IN THE FOLLOWING DECLARATIONS ARE SET FOR A
C  MAXIMUM OF 150 EQUATIONS. IF THE PACKAGE IS TO USED FOR A LARGER
C  VALUE OF N, THE DIMENSIONS SHOULD BE INCREASED ACCORDINGLY.  THE
C  DIMENSION OF PW BELOW MUST BE AT LEAST N**2 IF MITER = 1 OR 2,
C  BUT CAN BE REDUCED TO N IF MITER = 3, OR TO 1 IF MITER = 0.
C  THE DIMENSIONS OF YMAX, ERROR, SAVE1, SAVE2, IPIV, AND THE FIRST
C  DIMENSION OF Y SHOULD ALL BE AT LEAST N.  THE COLUMN LENGTH OF
C  THE Y ARRAY AS USED ELSEWHERE IS N0, NOT 150. THE ROW LENGTH OF Y
C  CAN BE REDUCED FROM 13 TO 6 IF METH = 2.
C  THE IPIV ARRAY IS USED ONLY IF MITER IS 1 OR 2.
C
C  THE COMMON BLOCK GEAR9 CAN BE ACCESSED EXTERNALLY BY THE USER
C  IF DESIRED.  IT CONTAINS THE STEP SIZE LAST USED (SUCCESSFULLY),
C  THE ORDER LAST USED (SUCCESSFULLY), THE NUMBER OF STEPS TAKEN
C  SO FAR, THE NUMBER OF F EVALUATIONS (DIFFUN CALLS) SO FAR,
C  AND THE NUMBER OF JACOBIAN EVALUATIONS SO FAR.
C
C  IN THE FOLLOWING DATA STATEMENT, SET..
C    LOUT   =  THE LOGICAL UNIT NUMBER FOR THE OUTPUT OF MESSAGES
C              DURING THE INTEGRATION.
C-----------------------------------------------------------------------
C
      DIMENSION Y0(N)
C         ***************       MODIF JACQUES     ***********
      DIMENSION Y(150,13)
C         ***************************************************
      COMMON /GEAR1/ T,H,HMIN,HMAX,EPSC,UROUND,NC,MFC,KFLAG,JSTART
      COMMON /GEAR2/ YMAX(150)
      COMMON /GEAR3/ ERROR(150)
      COMMON /GEAR4/ SAVE1(150)
      COMMON /GEAR5/ SAVE2(150)
      COMMON /GEAR6/ PW(22500)
      COMMON /GEAR7/ IPIV(150)
      COMMON /GEAR8/ EPSJ,NSQ
      COMMON /GEAR9/ HUSED,NQUSED,NSTEP,NFE,NJE
      SAVE
      DATA LOUT/10/
      IF (INDEX .EQ. 0) GO TO 20
      IF (INDEX .EQ. 2) GO TO 25
      IF (INDEX .EQ. -1) GO TO 30
      IF (INDEX .EQ. 3) GO TO 40
      IF (INDEX .NE. 1) GO TO 430
      IF (EPS .LE.  0.0) GO TO 400
      IF (N .LE. 0) GO TO 410
      IF ((T0-TOUT)*H0 .GE.  0.0) GO TO 420
C-----------------------------------------------------------------------
C  IF INITIAL VALUES OF YMAX OTHER THAN THOSE SET BELOW ARE DESIRED,
C  THEY SHOULD BE SET HERE.  ALL YMAX(I) MUST BE POSITIVE.
C  IF VALUES FOR HMIN OR HMAX, THE BOUNDS ON  ABS(H), OTHER THAN
C  THOSE BELOW ARE DESIRED, THEY SHOULD BE SET BELOW.
C  IN THE FOLLOWING STATEMENT, SET..
C    UROUND =  THE UNIT ROUNDOFF OF THE MACHINE, I.E. THE SMALLEST
C              POSITIVE U SUCH THAT 1. + U .NE. 1. ON THE MACHINE.
C-----------------------------------------------------------------------
C     UROUND = 3.1D-20
      DO 10 I = 1,N
        YMAX(I) = DABS(Y0(I))
        IF (YMAX(I) .EQ.  0.0) YMAX(I) = 1.0
 10     Y(I,1) = Y0(I)
      NC = N
      T = T0
      H = H0
      IF ((T+H) .EQ. T) WRITE(LOUT,15)
 15   FORMAT(35H WARNING..  T + H = T ON NEXT STEP.)
C
C  ATTENTION HMIN ET HMAX SONT INTRODUITS DANS LE MAIN
C    (CONTRAIREMENT A LA VERSION ORIGINALE DE GEAR2)
C
C     HMIN = DABS(H0)
C     HMAX = DABS(T0-TOUT)*10.0
C
      EPSC = EPS
      MFC = MF
      JSTART = 0
      N0 = N
      NSQ = N0*N0
      EPSJ = DSQRT(UROUND)
      NHCUT = 0
      GO TO 50
C
C  TOUTP IS THE PREVIOUS VALUE OF TOUT FOR USE IN HMAX.-----------------
 20   HMAX = DABS(TOUT-TOUTP)*10.
      GO TO 80
C
 25   HMAX = DABS(TOUT-TOUTP)*10.
      IF ((T-TOUT)*H .GE.  0.0) GO TO 500
      GO TO 85
C
 30   IF ((T-TOUT)*H .GE. 0.0 ) GO TO 440
      JSTART = -1
      NC = N
      EPSC = EPS
      MFC = MF
C
 40   IF ((T+H) .EQ. T) WRITE(LOUT,15)
C
 50   CALL STIFF (Y, N0)
C
      KGO = 1 - KFLAG
      GO TO (60, 100, 200, 300), KGO
C  KFLAG  =   0,  -1,  -2,  -3
C
 60   CONTINUE
C-----------------------------------------------------------------------
C  NORMAL RETURN FROM INTEGRATOR.
C
C  THE WEIGHTS YMAX(I) ARE UPDATED.  IF DIFFERENT VALUES ARE DESIRED,
C  THEY SHOULD BE SET HERE.  A TEST IS MADE FOR EPS BEING TOO SMALL
C  FOR THE MACHINE PRECISION.
C
C  ANY OTHER TESTS OR CALCULATIONS THAT ARE REQUIRED AFTER EVERY
C  STEP SHOULD BE INSERTED HERE.
C
C  IF INDEX = 3, Y0 IS SET TO THE CURRENT Y VALUES ON RETURN.
C  IF INDEX = 2, H IS CONTROLLED TO HIT TOUT (WITHIN ROUNDOFF
C  ERROR), AND THEN THE CURRENT Y VALUES ARE PUT IN Y0 ON RETURN.
C  FOR ANY OTHER VALUE OF INDEX, CONTROL RETURNS TO THE INTEGRATOR
C  UNLESS TOUT HAS BEEN REACHED.  THEN INTERPOLATED VALUES OF Y ARE
C  COMPUTED AND STORED IN Y0 ON RETURN.
C  IF INTERPOLATION IS NOT DESIRED, THE CALL TO INTERP SHOULD BE
C  REMOVED AND CONTROL TRANSFERRED TO STATEMENT 500 INSTEAD OF 520.
C-----------------------------------------------------------------------
      D =  0.0
      DO 70 I = 1,N
        AYI = DABS(Y(I,1))
        YMAX(I) = DMAX1(YMAX(I), AYI)
 70     D = D + (AYI/YMAX(I))**2
      D = D*(UROUND/EPS)**2
      XXN = N
      IF (D .GT. XXN) GO TO 250
      IF (INDEX .EQ. 3) GO TO 500
      IF (INDEX .EQ. 2) GO TO 85
 80   IF ((T-TOUT)*H .LT.  0.0) GO TO 40
      CALL INTERP (TOUT, Y, N0, Y0)
      GO TO 520
 85   IF (((T+H)-TOUT)*H .LE.  0.0) GO TO 40
      IF (DABS(T-TOUT) .LE. 100.0 *UROUND*HMAX) GO TO 500
      IF ((T-TOUT)*H .GE.  0.0) GO TO 500
      H = (TOUT - T)*( 1.0 - 4.0 *UROUND)
      JSTART = -1
      GO TO 40
C-----------------------------------------------------------------------
C  ON AN ERROR RETURN FROM INTEGRATOR, AN IMMEDIATE RETURN OCCURS IF
C  KFLAG = -2, AND RECOVERY ATTEMPTS ARE MADE OTHERWISE.
C  TO RECOVER, H AND HMIN ARE REDUCED BY A FACTOR OF .1 UP TO 2
C  TIMES BEFORE GIVING UP.
C-----------------------------------------------------------------------
 100  WRITE (LOUT,105) T
 105  FORMAT(//35H KFLAG = -1 FROM INTEGRATOR AT T = ,D16.8/
     1   39H  ERROR TEST FAILED WITH  ABS(H) = HMIN/)
 110  IF (NHCUT .EQ.  2) GO TO 150
      NHCUT = NHCUT + 1
      HMIN = HMIN*0.1
      H = H*0.1
      WRITE (LOUT,115) H
 115  FORMAT(24H  H HAS BEEN REDUCED TO ,D16.8,
     1   26H  AND STEP WILL BE RETRIED//)
      JSTART = -1
      GO TO 40
C
 150  WRITE (LOUT,155)
 155  FORMAT(//44H PROBLEM APPEARS UNSOLVABLE WITH GIVEN INPUT//)
      GO TO 500
C
 200  WRITE (LOUT,205) T,H
 205  FORMAT(//35H KFLAG = -2 FROM INTEGRATOR AT T = ,D16.8,5H  H =,
     1  D16.8/52H  THE REQUESTED ERROR IS SMALLER THAN CAN BE HANDLED//)
      GO TO 500
C
 250  WRITE (LOUT,255) T
 255  FORMAT(//37H INTEGRATION HALTED BY DRIVER AT T = ,D16.8/
     1   56H  EPS TOO SMALL TO BE ATTAINED FOR THE MACHINE PRECISION/)
      KFLAG = -2
      GO TO 500
C
 300  WRITE (LOUT,305) T
 305  FORMAT(//35H KFLAG = -3 FROM INTEGRATOR AT T = ,D16.8/
     1   45H  CORRECTOR CONVERGENCE COULD NOT BE ACHIEVED/)
      GO TO 110
C
 400  WRITE (LOUT,405)
 405  FORMAT(//28H ILLEGAL INPUT.. EPS .LE. 0.//)
      INDEX = -4
      RETURN
C
 410  WRITE (LOUT,415)
 415  FORMAT(//25H ILLEGAL INPUT.. N .LE. 0//)
      INDEX = -4
      RETURN
C
 420  WRITE (LOUT,425)
 425  FORMAT(//36H ILLEGAL INPUT.. (T0-TOUT)*H .GE. 0.//)
      INDEX = -4
      RETURN
C
 430  WRITE (LOUT,435) INDEX
 435  FORMAT(//24H ILLEGAL INPUT.. INDEX =,I5//)
      INDEX = -4
      RETURN
C
 440  WRITE(LOUT,445) T,TOUT,H
 445  FORMAT(//44H INDEX = -1 ON INPUT WITH (T-TOUT)*H .GE. 0./
     1   4H T =,D16.8,9H   TOUT =,D16.8,6H   H =,D16.8/
     1   44H INTERPOLATION WAS DONE AS ON NORMAL RETURN./
     2   41H DESIRED PARAMETER CHANGES WERE NOT MADE.)
      CALL INTERP (TOUT, Y, N0, Y0)
      INDEX = -5
      RETURN
C
 500  TOUT = T
      DO 510 I = 1,N
 510    Y0(I) = Y(I,1)
 520  INDEX = KFLAG
      TOUTP = TOUT
      H0 = HUSED
      IF (KFLAG .NE. 0) H0 = H
      RETURN
C----------------------- END OF SUBROUTINE DRIVE -----------------------
      END
      SUBROUTINE INTERP (TOUT, Y, N0, Y0)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      COMMON /GEAR1/ T,H,DUMMY(4),N,IDUMMY(2),JSTART
      DIMENSION Y0(N0),Y(150,13)
      SAVE
C-----------------------------------------------------------------------
C  SUBROUTINE INTERP COMPUTES INTERPOLATED VALUES OF THE DEPENDENT
C  VARIABLE Y AND STORES THEM IN Y0.  THE INTERPOLATION IS TO THE
C  POINT T = TOUT, AND USES THE NORDSIECK HISTORY ARRAY Y, AS FOLLOWS..
C                              NQ
C                   Y0(I)  =  SUM  Y(I,J+1)*S**J ,
C                             J=0
C  WHERE S = -(T-TOUT)/H.
C-----------------------------------------------------------------------
      DO 10 I = 1,N
 10     Y0(I) = Y(I,1)
      L = JSTART + 1
      S = (TOUT - T)/H
      S1 = 1.0
      DO 30 J = 2,L
        S1 = S1*S
        DO 20 I = 1,N
 20       Y0(I) = Y0(I) + S1*Y(I,J)
 30     CONTINUE
      RETURN
C----------------------- END OF SUBROUTINE INTERP ----------------------
      END
      SUBROUTINE STIFF (Y, N0)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      COMMON /GEAR1/ T,H,HMIN,HMAX,EPS,UROUND,N,MF,KFLAG,JSTART
      COMMON /GEAR2/ YMAX(150)
      COMMON /GEAR3/ ERROR(150)
      COMMON /GEAR4/ SAVE1(150)
      COMMON /GEAR5/ SAVE2(150)
      COMMON /GEAR6/ PW(22500)
      COMMON /GEAR7/ IPIV(150)
      COMMON /GEAR9/ HUSED,NQUSED,NSTEP,NFE,NJE
      DIMENSION Y(150,13), YMOI(150)
      SAVE
C-----------------------------------------------------------------------
C  STIFF PERFORMS ONE STEP OF THE INTEGRATION OF AN INITIAL VALUE
C  PROBLEM FOR A SYSTEM OF ORDINARY DIFFERENTIAL EQUATIONS.
C  COMMUNICATION WITH STIFF IS DONE WITH THE FOLLOWING VARIABLES..
C
C    Y       AN N0 BY LMAX ARRAY CONTAINING THE DEPENDENT VARIABLES
C              AND THEIR SCALED DERIVATIVES.  LMAX IS 13 FOR THE ADAMS
C              METHODS AND 6 FOR THE GEAR METHODS.  LMAX - 1 = MAXDER
C              IS THE MAXIMUM ORDER AVAILABLE.  SEE SUBROUTINE COSET.
C              Y(I,J+1) CONTAINS THE J-TH DERIVATIVE OF Y(I), SCALED BY
C              H**J/FACTORIAL(J)  (J = 0,1,...,NQ).
C    N0      A CONSTANT INTEGER .GE. N, USED FOR DIMENSIONING PURPOSES.
C    T       THE INDEPENDENT VARIABLE. T IS UPDATED ON EACH STEP TAKEN.
C    H       THE STEP SIZE TO BE ATTEMPTED ON THE NEXT STEP.
C              H IS ALTERED BY THE ERROR CONTROL ALGORITHM DURING THE
C              PROBLEM.  H CAN BE EITHER POSITIVE OR NEGATIVE, BUT ITS
C              SIGN MUST REMAIN CONSTANT THROUGHOUT THE PROBLEM.
C    HMIN,   THE MINIMUM AND MAXIMUM ABSOLUTE VALUE OF THE STEP SIZE
C     HMAX     TO BE USED FOR THE STEP.  THESE MAY BE CHANGED AT ANY
C              TIME, BUT WILL NOT TAKE EFFECT UNTIL THE NEXT H CHANGE.
C    EPS     THE RELATIVE ERROR BOUND.  SEE DESCRIPTION IN DRIVER.
C    UROUND  THE UNIT ROUNDOFF OF THE MACHINE.
C    N       THE NUMBER OF FIRST-ORDER DIFFERENTIAL EQUATIONS.
C    MF      THE METHOD FLAG.  SEE DESCRIPTION IN DRIVER.
C    KFLAG   A COMPLETION CODE WITH THE FOLLOWING MEANINGS..
C                      0  THE STEP WAS SUCCESFUL.
C                     -1  THE REQUESTED ERROR COULD NOT BE ACHIEVED
C                           WITH DABS(H) = HMIN.
C                     -2  THE REQUESTED ERROR IS SMALLER THAN CAN
C                           BE HANDLED FOR THIS PROBLEM.
C                     -3  CORRECTOR CONVERGENCE COULD NOT BE
C                           ACHIEVED FOR DABS(H) = HMIN.
C              ON A RETURN WITH KFLAG NEGATIVE, THE VALUES OF T AND
C              THE Y ARRAY ARE AS OF THE BEGINNING OF THE LAST
C              STEP, AND H IS THE LAST STEP SIZE ATTEMPTED.
C    JSTART  AN INTEGER USED ON INPUT AND OUTPUT.
C              ON INPUT, IT HAS THE FOLLOWING VALUES AND MEANINGS..
C                      0  PERFORM THE FIRST STEP.
C                  .GT.0  TAKE A NEW STEP CONTINUING FROM THE LAST.
C                  .LT.0  TAKE THE NEXT STEP WITH A NEW VALUE OF
C                           H, EPS, N, AND/OR MF.
C              ON EXIT, JSTART IS NQ, THE CURRENT ORDER OF THE METHOD.
C    YMAX    AN ARRAY OF N ELEMENTS WITH WHICH THE ESTIMATED LOCAL
C              ERRORS IN Y ARE COMPARED.
C    ERROR   AN ARRAY OF N ELEMENTS.  ERROR(I)/TQ(2) IS THE ESTIMATED
C              ONE-STEP ERROR IN Y(I).
C    SAVE1,  TWO ARRAYS OF WORKING STORAGE,
C     SAVE2    EACH OF LENGTH N.
C    PW      A BLOCK OF LOCATIONS USED FOR PARTIAL DERIVATIVES IF
C              MITER IS NOT 0.  SEE DESCRIPTION IN DRIVER.
C    IPIV    AN INTEGER ARRAY OF LENGTH N USED FOR PIVOT
C              INFORMATION IF MITER = 1 OR 2.
C-----------------------------------------------------------------------
      DIMENSION EL(13),TQ(4)
      DATA EL(2)/ 1.0/, OLDL0/ 1.0/
      KFLAG = 0
      TOLD = T
C
      IF (JSTART .GT. 0) GO TO 200
      IF (JSTART .NE. 0) GO TO 120
C-----------------------------------------------------------------------
C  ON THE FIRST CALL, THE ORDER IS SET TO 1 AND THE INITIAL YDOT IS
C  CALCULATED.  RMAX IS THE MAXIMUM RATIO BY WHICH H CAN BE INCREASED
C  IN A SINGLE STEP.  IT IS INITIALLY 1.E4 TO COMPENSATE FOR THE SMALL
C  INITIAL H, BUT THEN IS NORMALLY EQUAL TO 10.  IF A FAILURE
C  OCCURS (IN CORRECTOR CONVERGENCE OR ERROR TEST), RMAX IS SET AT 2
C  FOR THE NEXT INCREASE.
C-----------------------------------------------------------------------
      DO 109 I=1,N
         YMOI(I) = Y(I,1)
 109  CONTINUE
      CALL DIFFUN (N, T, YMOI, SAVE1)
      DO 110 I = 1,N
 110    Y(I,2) = H*SAVE1(I)
      METH = MF/10
      MITER = MF - 10*METH
      NQ = 1
      L = 2
      IDOUB = 3
      RMAX =  1.0D4
      RC = 0.0
      CRATE = 1.0
      EPSOLD = EPS
      HOLD = H
      MFOLD = MF
      NOLD = N
      NSTEP = 0
      NSTEPJ = 0
      NFE = 1
      NJE = 0
      IRET = 1
      GO TO 130
C-----------------------------------------------------------------------
C  IF THE CALLER HAS CHANGED METH, COSET IS CALLED TO SET
C  THE COEFFICIENTS OF THE METHOD.  IF THE CALLER HAS CHANGED
C  N, EPS, OR METH, THE CONSTANTS E, EDN, EUP, AND BND MUST BE RESET.
C  E IS A COMPARISON FOR ERRORS OF THE CURRENT ORDER NQ. EUP IS
C  TO TEST FOR INCREASING THE ORDER, EDN FOR DECREASING THE ORDER.
C  BND IS USED TO TEST FOR CONVERGENCE OF THE CORRECTOR ITERATES.
C  IF THE CALLER HAS CHANGED H, Y MUST BE RESCALED.
C  IF H OR METH HAS BEEN CHANGED, IDOUB IS RESET TO L + 1 TO PREVENT
C  FURTHER CHANGES IN H FOR THAT MANY STEPS.
C-----------------------------------------------------------------------
 120  IF (MF .EQ. MFOLD) GO TO 150
      MEO = METH
      MIO = MITER
      METH = MF/10
      MITER = MF - 10*METH
      MFOLD = MF
      IF (MITER .NE. MIO) IWEVAL = MITER
      IF (METH .EQ. MEO) GO TO 150
      IDOUB = L + 1
      IRET = 1
 130  CALL COSET (METH, NQ, EL, TQ, MAXDER)
      LMAX = MAXDER + 1
      RC = RC*EL(1)/OLDL0
      OLDL0 = EL(1)
 140  FN = N
      EDN = FN*(     TQ(1) *EPS)**2
      E   = FN*(     TQ(2) *EPS)**2
      EUP = FN*(     TQ(3) *EPS)**2
      BND = FN*(     TQ(4) *EPS)**2
      GO TO (160, 170, 200), IRET
 150  IF ((EPS .EQ. EPSOLD) .AND. (N .EQ. NOLD)) GO TO 160
      EPSOLD = EPS
      NOLD = N
      IRET = 1
      GO TO 140
 160  IF (H .EQ. HOLD) GO TO 200
      RH = H/HOLD
      H = HOLD
      IREDO = 3
      GO TO 175
 170  RH = DMAX1(RH,HMIN/DABS(H))
 175  RH = DMIN1(RH,HMAX/DABS(H),RMAX)
      R1 = 1.0
      DO 180 J = 2,L
        R1 = R1*RH
        DO 180 I = 1,N
 180      Y(I,J) = Y(I,J)*R1
      H = H*RH
      RC = RC*RH
      IDOUB = L + 1
      IF (IREDO .EQ. 0) GO TO 690
C-----------------------------------------------------------------------
C  THIS SECTION COMPUTES THE PREDICTED VALUES BY EFFECTIVELY
C  MULTIPLYING THE Y ARRAY BY THE PASCAL TRIANGLE MATRIX.
C  RC IS THE RATIO OF NEW TO OLD VALUES OF THE COEFFICIENT  H*EL(1).
C  WHEN RC DIFFERS FROM 1 BY MORE THAN 30 PERCENT, OR THE CALLER HAS
C  CHANGED MITER, IWEVAL IS SET TO MITER TO FORCE THE PARTIALS TO BE
C  UPDATED, IF PARTIALS ARE USED.  IN ANY CASE, THE PARTIALS
C  ARE UPDATED AT LEAST EVERY 20-TH STEP.
C-----------------------------------------------------------------------
 200  IF (DABS(RC-1.0 ) .GT. 0.3  ) IWEVAL = MITER
      IF (NSTEP .GE. NSTEPJ+20) IWEVAL = MITER
      T = T + H
      DO 212 J1 = 1,NQ
        DO 211 J2 = J1,NQ
          J = (NQ + J1) - J2
          DO 210 I = 1,N
            Y(I,J) = Y(I,J) + Y(I,J+1)
 210      CONTINUE
 211    CONTINUE
 212  CONTINUE
C-----------------------------------------------------------------------
C  UP TO 3 CORRECTOR ITERATIONS ARE TAKEN.  A CONVERGENCE TEST IS
C  MADE ON THE R.M.S. NORM OF EACH CORRECTION, USING BND, WHICH
C  IS DEPENDENT ON EPS.  THE SUM OF THE CORRECTIONS IS ACCUMULATED
C  IN THE VECTOR ERROR(I).  THE Y ARRAY IS NOT ALTERED IN THE CORRECTOR
C  LOOP.  THE UPDATED Y VECTOR IS STORED TEMPORARILY IN SAVE1.
C-----------------------------------------------------------------------
 220  DO 230 I = 1,N
 230    ERROR(I) = 0.0
      M = 0
      DO 231 I=1,N
         YMOI(I) = Y(I,1)
 231  CONTINUE
      CALL DIFFUN (N, T, YMOI, SAVE2)
      NFE = NFE + 1
      IF (IWEVAL .LE. 0) GO TO 290
C-----------------------------------------------------------------------
C  IF INDICATED, THE MATRIX P = I - H*EL(1)*J IS REEVALUATED BEFORE
C  STARTING THE CORRECTOR ITERATION.  IWEVAL IS SET TO 0 AS AN
C  INDICATOR THAT THIS HAS BEEN DONE.  IF MITER = 1 OR 2, P IS
C  COMPUTED AND PROCESSED IN PSET.  IF MITER = 3, THE MATRIX USED
C  IS P = I - H*EL(1)*D, WHERE D IS A DIAGONAL MATRIX.
C-----------------------------------------------------------------------
      IWEVAL = 0
      RC = 1.0
      NJE = NJE + 1
      NSTEPJ = NSTEP
      GO TO (250, 240, 260), MITER
 240  NFE = NFE + N
 250  CON = -H*EL(1)
      CALL PSET (Y, N0, CON, MITER, IER)
      IF (IER .NE. 0) GO TO 420
      GO TO 350
 260  R = EL(1)* 0.1
      DO 270 I = 1,N
 270    PW(I) = Y(I,1) + R*(H*SAVE2(I) - Y(I,2))
      CALL DIFFUN (N, T, PW, SAVE1)
      NFE = NFE + 1
      HL0 = H*EL(1)
      DO 280 I = 1,N
        R0 = H*SAVE2(I) - Y(I,2)
        PW(I) = 1.0
        D = 0.1 *R0 - H*(SAVE1(I) - SAVE2(I))
        SAVE1(I) = 0.0
        IF (DABS(R0) .LT. UROUND*YMAX(I)) GO TO 280
        IF (DABS(D) .EQ. 0.0 ) GO TO 420
        PW(I) = 0.1 *R0/D
        SAVE1(I) = PW(I)*R0
 280    CONTINUE
      GO TO 370
 290  IF (MITER .NE. 0) GO TO (350, 350, 310), MITER
C-----------------------------------------------------------------------
C  IN THE CASE OF FUNCTIONAL ITERATION, UPDATE Y DIRECTLY FROM
C  THE RESULT OF THE LAST DIFFUN CALL.
C-----------------------------------------------------------------------
      D = 0.0
      DO 300 I = 1,N
        R = H*SAVE2(I) - Y(I,2)
        D = D + ( (R-ERROR(I))/YMAX(I) )**2
        SAVE1(I) = Y(I,1) + EL(1)*R
 300    ERROR(I) = R
      GO TO 400
C-----------------------------------------------------------------------
C  IN THE CASE OF THE CHORD METHOD, COMPUTE THE CORRECTOR ERROR,
C  F SUB (M), AND SOLVE THE LINEAR SYSTEM WITH THAT AS RIGHT-HAND
C  SIDE AND P AS COEFFICIENT MATRIX, USING THE LU DECOMPOSITION
C  IF MITER = 1 OR 2.  IF MITER = 3, THE COEFFICIENT H*EL(1)
C  IN P IS UPDATED.
C-----------------------------------------------------------------------
 310  PHL0 = HL0
      HL0 = H*EL(1)
      IF (HL0 .EQ. PHL0) GO TO 330
      R = HL0/PHL0
      DO 320 I = 1,N
        D =  1.0 - R*( 1.0 -  1.0/PW(I))
        IF (DABS(D) .EQ. 0.0 ) GO TO 440
 320    PW(I) = 1.0 /D
 330  DO 340 I = 1,N
 340    SAVE1(I) = PW(I)*(H*SAVE2(I) - (Y(I,2) + ERROR(I)))
      GO TO 370
 350  DO 360 I = 1,N
 360    SAVE1(I) = H*SAVE2(I) - (Y(I,2) + ERROR(I))
      CALL SOL (N, N0, PW, SAVE1, IPIV)
 370  D = 0.0
      DO 380 I = 1,N
        ERROR(I) = ERROR(I) + SAVE1(I)
        D = D + (SAVE1(I)/YMAX(I))**2
 380    SAVE1(I) = Y(I,1) + EL(1)*ERROR(I)
C-----------------------------------------------------------------------
C  TEST FOR CONVERGENCE.  IF M.GT.0, AN ESTIMATE OF THE CONVERGENCE
C  RATE CONSTANT IS STORED IN CRATE, AND THIS IS USED IN THE TEST.
C-----------------------------------------------------------------------
 400  IF (M .NE. 0) CRATE = DMAX1(0.9 *CRATE,D/D1)
      IF ((D*DMIN1(1.D0,2.0 *CRATE)) .LE. BND) GO TO 450
      D1 = D
      M = M + 1
      IF (M .EQ. 3) GO TO 410
      CALL DIFFUN (N, T, SAVE1, SAVE2)
      GO TO 290
C-----------------------------------------------------------------------
C  THE CORRECTOR ITERATION FAILED TO CONVERGE IN 3 TRIES.  IF PARTIALS
C  ARE INVOLVED BUT ARE NOT UP TO DATE, THEY ARE REEVALUATED FOR THE
C  NEXT TRY.  OTHERWISE THE Y ARRAY IS RETRACTED TO ITS VALUES
C  BEFORE PREDICTION, AND H IS REDUCED, IF POSSIBLE.  IF NOT, A
C  NO-CONVERGENCE EXIT IS TAKEN.
C-----------------------------------------------------------------------
 410  NFE = NFE + 2
      IF (IWEVAL .EQ. -1) GO TO 440
 420  T = TOLD
      RMAX = 2.0
      DO 430 J1 = 1,NQ
        DO 430 J2 = J1,NQ
          J = (NQ + J1) - J2
          DO 430 I = 1,N
 430        Y(I,J) = Y(I,J) - Y(I,J+1)
      IF (DABS(H) .LE. HMIN*1.00001  ) GO TO 680
      RH =  0.25
      IREDO = 1
      GO TO 170
 440  IWEVAL = MITER
      GO TO 220
C-----------------------------------------------------------------------
C  THE CORRECTOR HAS CONVERGED.  IWEVAL IS SET TO -1 IF PARTIAL
C  DERIVATIVES WERE USED, TO SIGNAL THAT THEY MAY NEED UPDATING ON
C  SUBSEQUENT STEPS.  THE ERROR TEST IS MADE AND CONTROL PASSES TO
C  STATEMENT 500 IF IT FAILS.
C-----------------------------------------------------------------------
 450  IF (MITER .NE. 0) IWEVAL = -1
      NFE = NFE + M
      D = 0.0
      DO 460 I = 1,N
 460    D = D + (ERROR(I)/YMAX(I))**2
      IF (D .GT. E) GO TO 500
C-----------------------------------------------------------------------
C  AFTER A SUCCESSFUL STEP, UPDATE THE Y ARRAY.
C  CONSIDER CHANGING H IF IDOUB = 1.  OTHERWISE DECREASE IDOUB BY 1.
C  IF IDOUB IS THEN 1 AND NQ .LT. MAXDER, THEN ERROR IS SAVED FOR
C  USE IN A POSSIBLE ORDER INCREASE ON THE NEXT STEP.
C  IF A CHANGE IN H IS CONSIDERED, AN INCREASE OR DECREASE IN ORDER
C  BY ONE IS CONSIDERED ALSO.  A CHANGE IN H IS MADE ONLY IF IT IS BY A
C  FACTOR OF AT LEAST 1.1.  IF NOT, IDOUB IS SET TO 10 TO PREVENT
C  TESTING FOR THAT MANY STEPS.
C-----------------------------------------------------------------------
      KFLAG = 0
      IREDO = 0
      NSTEP = NSTEP + 1
      HUSED = H
      NQUSED = NQ
      DO 470 J = 1,L
        DO 470 I = 1,N
 470      Y(I,J) = Y(I,J) + EL(J)*ERROR(I)
      IF (IDOUB .EQ. 1) GO TO 520
      IDOUB = IDOUB - 1
      IF (IDOUB .GT. 1) GO TO 700
      IF (L .EQ. LMAX) GO TO 700
      DO 490 I = 1,N
 490    Y(I,LMAX) = ERROR(I)
      GO TO 700
C-----------------------------------------------------------------------
C  THE ERROR TEST FAILED.  KFLAG KEEPS TRACK OF MULTIPLE FAILURES.
C  RESTORE T AND THE Y ARRAY TO THEIR PREVIOUS VALUES, AND PREPARE
C  TO TRY THE STEP AGAIN.  COMPUTE THE OPTIMUM STEP SIZE FOR THIS OR
C  ONE LOWER ORDER.
C-----------------------------------------------------------------------
 500  KFLAG = KFLAG - 1
      T = TOLD
      DO 510 J1 = 1,NQ
        DO 510 J2 = J1,NQ
          J = (NQ + J1) - J2
          DO 510 I = 1,N
 510        Y(I,J) = Y(I,J) - Y(I,J+1)
      RMAX = 2.0
      IF (DABS(H) .LE. HMIN*1.00001  ) GO TO 660
      IF (KFLAG .LE. -3) GO TO 640
      IREDO = 2
      PR3 = 1.D20
      GO TO 540
C-----------------------------------------------------------------------
C  REGARDLESS OF THE SUCCESS OR FAILURE OF THE STEP, FACTORS
C  PR1, PR2, AND PR3 ARE COMPUTED, BY WHICH H COULD BE DIVIDED
C  AT ORDER NQ - 1, ORDER NQ, OR ORDER NQ + 1, RESPECTIVELY.
C  IN THE CASE OF FAILURE, PR3 = 1.E20 TO AVOID AN ORDER INCREASE.
C  THE SMALLEST OF THESE IS DETERMINED AND THE NEW ORDER CHOSEN
C  ACCORDINGLY.  IF THE ORDER IS TO BE INCREASED, WE COMPUTE ONE
C  ADDITIONAL SCALED DERIVATIVE.
C-----------------------------------------------------------------------
 520  PR3 = 1.D20
      IF (L .EQ. LMAX) GO TO 540
      D1 = 0.0
      DO 530 I = 1,N
 530    D1 = D1 + ((ERROR(I) - Y(I,LMAX))/YMAX(I))**2
      XXL =  L
      ENQ3 =  0.5/(XXL+1)
      PR3 = ((D1/EUP)**ENQ3)*1.4   + 1.4D-06
 540  XXL =  L
      ENQ2 =  0.5/XXL
      PR2 = ((D/E)**ENQ2)*1.2   + 1.2D-06
      PR1 = 1.D20
      IF (NQ .EQ. 1) GO TO 560
      D = 0.0
      DO 550 I = 1,N
 550    D = D + (Y(I,L)/YMAX(I))**2
      XXNQ = NQ
      ENQ1 =  0.5/XXNQ
      PR1 = ((D/EDN)**ENQ1)*1.3   + 1.3D-06
 560  IF (PR2 .LE. PR3) GO TO 570
      IF (PR3 .LT. PR1) GO TO 590
      GO TO 580
 570  IF (PR2 .GT. PR1) GO TO 580
      NEWQ = NQ
      RH = 1.0 /PR2
      GO TO 620
 580  NEWQ = NQ - 1
      RH = 1.0 /PR1
      GO TO 620
 590  NEWQ = L
      RH = 1.0 /PR3
      IF (RH .LT. 1.1  ) GO TO 610
      XXL = L
      DO 600 I = 1,N
 600    Y(I,NEWQ+1) = ERROR(I)*EL(L)/XXL
      GO TO 630
 610  IDOUB = 10
      GO TO 700
 620  IF ((KFLAG .EQ. 0) .AND. (RH .LT. 1.1  )) GO TO 610
C-----------------------------------------------------------------------
C  IF THERE IS A CHANGE OF ORDER, RESET NQ, L, AND THE COEFFICIENTS.
C  IN ANY CASE H IS RESET ACCORDING TO RH AND THE Y ARRAY IS RESCALED.
C  THEN EXIT FROM 690 IF THE STEP WAS OK, OR REDO THE STEP OTHERWISE.
C-----------------------------------------------------------------------
      IF (NEWQ .EQ. NQ) GO TO 170
 630  NQ = NEWQ
      L = NQ + 1
      IRET = 2
      GO TO 130
C-----------------------------------------------------------------------
C  CONTROL REACHES THIS SECTION IF 3 OR MORE FAILURES HAVE OCCURED.
C  IT IS ASSUMED THAT THE DERIVATIVES THAT HAVE ACCUMULATED IN THE
C  Y ARRAY HAVE ERRORS OF THE WRONG ORDER.  HENCE THE FIRST
C  DERIVATIVE IS RECOMPUTED, AND THE ORDER IS SET TO 1.  THEN
C  H IS REDUCED BY A FACTOR OF 10, AND THE STEP IS RETRIED.
C  AFTER A TOTAL OF 7 FAILURES, AN EXIT IS TAKEN WITH KFLAG = -2.
C-----------------------------------------------------------------------
 640  IF (KFLAG .EQ. -7) GO TO 670
      RH =  0.1
      RH = DMAX1(HMIN/ ABS(H),RH)
      H = H*RH
      DO 641 I=1,N
         YMOI(I) = Y(I,1)
 641  CONTINUE
      CALL DIFFUN (N, T, YMOI, SAVE1)
      NFE = NFE + 1
      DO 650 I = 1,N
 650    Y(I,2) = H*SAVE1(I)
      IWEVAL = MITER
      IDOUB = 10
      IF (NQ .EQ. 1) GO TO 200
      NQ = 1
      L = 2
      IRET = 3
      GO TO 130
C-----------------------------------------------------------------------
C  ALL RETURNS ARE MADE THROUGH THIS SECTION.  H IS SAVED IN HOLD
C  TO ALLOW THE CALLER TO CHANGE H ON THE NEXT STEP.
C-----------------------------------------------------------------------
 660  KFLAG = -1
      GO TO 700
 670  KFLAG = -2
      GO TO 700
 680  KFLAG = -3
      GO TO 700
 690  RMAX = 10.0
 700  HOLD = H
      JSTART = NQ
      RETURN
C----------------------- END OF SUBROUTINE STIFF -----------------------
      END
      SUBROUTINE COSET (METH, NQ, EL, TQ, MAXDER)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C-----------------------------------------------------------------------
C  COSET IS CALLED BY STIFF AND SETS COEFFICIENTS FOR USE THERE.
C  THE VECTOR EL, OF LENGTH NQ + 1, DETERMINES THE BASIC METHOD.
C  THE VECTOR TQ, OF LENGTH 4, IS INVOLVED IN ADJUSTING THE STEP SIZE
C  IN RELATION TO TRUNCATION ERROR.  ITS VALUES ARE GIVEN BY THE
C  PERTST ARRAY.
C  THE VECTORS EL AND TQ DEPEND ON METH AND NQ.
C  COSET ALSO SETS MAXDER, THE MAXIMUM ORDER OF THE METHOD AVAILABLE.
C  CURRENTLY THIS IS 12 FOR THE ADAMS AND 5 FOR THE BDF METHODS.
C  LMAX = MAXDER + 1 IS THE NUMBER OF COLUMNS IN THE Y ARRAY.
C  THE MAXIMUM ORDER USED MAY BE REDUCED SIMPLY BY CHANGING THE
C  THE NUMBERS IN STATEMENTS 1 AND 2 BELOW.
C
C  THE COEFFICIENTS IN PERTST NEED BE GIVEN TO ONLY ABOUT
C  ONE PERCENT ACCURACY.  THE ORDER IN WHICH THE GROUPS APPEAR BELOW
C  IS..  COEFFICIENTS FOR ORDER NQ - 1, COEFFICIENTS FOR ORDER NQ,
C  COEFFICIENTS FOR ORDER NQ + 1.  WITHIN EACH GROUP ARE THE
C  COEFFICIENTS FOR THE ADAMS METHODS, FOLLOWED BY THOSE FOR THE
C  GEAR METHODS.  SEE REFERENCE 3 FOR DETAILS.
C-----------------------------------------------------------------------
      DIMENSION PERTST(12,2,3),EL(13),TQ(4)
      SAVE
      DATA  PERTST / 1.,1.,2.,1.,.3158,.07407,.01391,.002182,
     1                 .0002945,.00003492,.000003692,.0000003524,
     2               1.,1.,.5,.1667,.04167,1.,1.,1.,1.,1.,1.,1.,
     3               2.,12.,24.,37.89,53.33,70.08,87.97,106.9,
     4                 126.7,147.4,168.8,191.0,
     5               2.0,4.5,7.333,10.42,13.7,1.,1.,1.,1.,1.,1.,1.,
     6               12.0,24.0,37.89,53.33,70.08,87.97,106.9,
     7                 126.7,147.4,168.8,191.0,1.,
     8               3.0,6.0,9.167,12.5,1.,1.,1.,1.,1.,1.,1.,1. /
C
      GO TO (1,2), METH
 1    MAXDER = 12
      GO TO (101,102,103,104,105,106,107,108,109,110,111,112), NQ
 2    MAXDER = 5
      GO TO (201,202,203,204,205), NQ
C-----------------------------------------------------------------------
C  THE FOLLOWING COEFFICIENTS SHOULD BE DEFINED TO MACHINE ACCURACY.
C  FOR A GIVEN ORDER NQ, THEY CAN BE CALCULATED BY USE OF THE
C  GENERATING POLYNOMIAL L(T), WHOSE COEFFICIENTS ARE EL(I)..
C       L(T) = EL(1) + EL(2)*T + ... + EL(NQ+1)*T**NQ.
C  FOR THE IMPLICIT ADAMS METHODS, L(T) IS GIVEN BY
C       DL/DT = (T+1)*(T+2)* ... *(T+NQ-1)/K,    L(-1) = 0,
C  WHERE                 K = FACTORIAL(NQ-1).
C  FOR THE GEAR METHODS,
C       L(T) = (T+1)*(T+2)* ... *(T+NQ)/K,
C  WHERE         K = FACTORIAL(NQ)*(1 + 1/2 + ... + 1/NQ).
C
C  THE ORDER IN WHICH THE GROUPS APPEAR BELOW IS..
C  IMPLICIT ADAMS METHODS OF ORDERS 1 TO 12,
C  BACKWARD DIFFERENTIATION METHODS OF ORDERS 1 TO 5.
C-----------------------------------------------------------------------
 101  EL(1) = 1.0D0
      GO TO 900
 102  EL(1) = 0.5D0
      EL(3) = 0.5D0
      GO TO 900
 103  EL(1) = 4.1666666666666667D-01
      EL(3) = 0.75D0
      EL(4) = 1.6666666666666667D-01
      GO TO 900
 104  EL(1) = 0.375D0
      EL(3) = 9.1666666666666667D-01
      EL(4) = 3.3333333333333333D-01
      EL(5) = 4.1666666666666667D-02
      GO TO 900
 105  EL(1) = 3.4861111111111111D-01
      EL(3) = 1.0416666666666667D0
      EL(4) = 4.8611111111111111D-01
      EL(5) = 1.0416666666666667D-01
      EL(6) = 8.3333333333333333D-03
      GO TO 900
 106  EL(1) = 3.2986111111111111D-01
      EL(3) = 1.1416666666666667D+00
      EL(4) = 0.625D+00
      EL(5) = 1.7708333333333333D-01
      EL(6) = 0.025D+00
      EL(7) = 1.3888888888888889D-03
      GO TO 900
 107  EL(1) = 3.1559193121693122D-01
      EL(3) = 1.225D+00
      EL(4) = 7.5185185185185185D-01
      EL(5) = 2.5520833333333333D-01
      EL(6) = 4.8611111111111111D-02
      EL(7) = 4.8611111111111111D-03
      EL(8) = 1.9841269841269841D-04
      GO TO 900
 108  EL(1) = 3.0422453703703704D-01
      EL(3) = 1.2964285714285714D+00
      EL(4) = 8.6851851851851852D-01
      EL(5) = 3.3576388888888889D-01
      EL(6) = 7.7777777777777778D-02
      EL(7) = 1.0648148148148148D-02
      EL(8) = 7.9365079365079365D-04
      EL(9) = 2.4801587301587302D-05
      GO TO 900
 109  EL(1) = 2.9486800044091711D-01
      EL(3) = 1.3589285714285714D+00
      EL(4) = 9.7655423280423280D-01
      EL(5) = 0.4171875D+00
      EL(6) = 1.1135416666666667D-01
      EL(7) = 0.01875D+00
      EL(8) = 1.9345238095238095D-03
      EL(9) = 1.1160714285714286D-04
      EL(10)= 2.7557319223985891D-06
      GO TO 900
 110  EL(1) = 2.8697544642857143D-01
      EL(3) = 1.4144841269841270D+00
      EL(4) = 1.0772156084656085D+00
      EL(5) = 4.9856701940035273D-01
      EL(6) = 0.1484375D+00
      EL(7) = 2.9060570987654321D-02
      EL(8) = 3.7202380952380952D-03
      EL(9) = 2.9968584656084656D-04
      EL(10)= 1.3778659611992945D-05
      EL(11)= 2.7557319223985891D-07
      GO TO 900
 111  EL(1) = 2.8018959644393672D-01
      EL(3) = 1.4644841269841270D+00
      EL(4) = 1.1715145502645503D+00
      EL(5) = 5.7935819003527337D-01
      EL(6) = 1.8832286155202822D-01
      EL(7) = 4.1430362654320988D-02
      EL(8) = 6.2111441798941799D-03
      EL(9) = 6.2520667989417989D-04
      EL(10)= 4.0417401528512640D-05
      EL(11)= 1.5156525573192240D-06
      EL(12)= 2.5052108385441719D-08
      GO TO 900
 112  EL(1) = 2.7426554003159906D-01
      EL(3) = 1.5099386724386724D+00
      EL(4) = 1.2602711640211640D+00
      EL(5) = 6.5923418209876543D-01
      EL(6) = 2.3045800264550265D-01
      EL(7) = 5.5697246105232216D-02
      EL(8) = 9.4394841269841270D-03
      EL(9) = 1.1192749669312169D-03
      EL(10)= 9.0939153439153439D-05
      EL(11)= 4.8225308641975309D-06
      EL(12)= 1.5031265031265031D-07
      EL(13)= 2.0876756987868099D-09
      GO TO 900
C
 201  EL(1) = 1.0D+00
      GO TO 900
 202  EL(1) = 6.6666666666666667D-01
      EL(3) = 3.3333333333333333D-01
      GO TO 900
 203  EL(1) = 5.4545454545454545D-01
      EL(3) = EL(1)
      EL(4) = 9.0909090909090909D-02
      GO TO 900
 204  EL(1) = 0.48D+00
      EL(3) = 0.7D+00
      EL(4) = 0.2D+00
      EL(5) = 0.02D+00
      GO TO 900
 205  EL(1) = 4.3795620437956204D-01
      EL(3) = 8.2116788321167883D-01
      EL(4) = 3.1021897810218978D-01
      EL(5) = 5.4744525547445255D-02
      EL(6) = 3.6496350364963504D-03
C
 900  DO 910 K = 1,3
 910     TQ(K) = PERTST(NQ,METH,K)
      XXNQ = NQ
      TQ(4) = .5*TQ(2)/(XXNQ+2.0)
      RETURN
C----------------------- END OF SUBROUTINE COSET -----------------------
      END
      SUBROUTINE PSET (Y, N0, CON, MITER, IER)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION Y(N0,13)
      COMMON /GEAR1/ T,H,DUMMY(3),UROUND,N,IDUMMY(3)
      COMMON /GEAR2/ YMAX(150)
      COMMON /GEAR4/ SAVE1(150)
      COMMON /GEAR5/ SAVE2(150)
      COMMON /GEAR6/ PW(22500)
      COMMON /GEAR7/ IPIV(150)
      COMMON /GEAR8/ EPSJ,NSQ
      SAVE
C-----------------------------------------------------------------------
C  PSET IS CALLED BY STIFF TO COMPUTE AND PROCESS THE MATRIX
C  P = I - H*EL(1)*J , WHERE J IS AN APPROXIMATION TO THE JACOBIAN.
C  J IS COMPUTED, EITHER BY THE USER-SUPPLIED ROUTINE PEDERV
C  IF MITER = 1, OR BY FINITE DIFFERENCING IF MITER = 2.
C  J IS STORED IN PW AND REPLACED BY P, USING CON = -H*EL(1).
C  THEN P IS SUBJECTED TO LU DECOMPOSITION IN PREPARATION FOR
C  LATER SOLUTION OF LINEAR SYSTEMS WITH P AS COEFFICIENT MATRIX.
C
C  IN ADDITION TO VARIABLES DESCRIBED PREVIOUSLY, COMMUNICATION
C  WITH PSET USES THE FOLLOWING..
C    EPSJ    = DSQRT(UROUND), USED IN THE NUMERICAL JACOBIAN INCREMENTS.
C    NSQ     = N0**2.
C-----------------------------------------------------------------------
      IF (MITER .EQ. 2) GO TO 20
C  IF MITER = 1, CALL PEDERV AND MULTIPLY BY SCALAR.--------------------
      CALL PEDERV (N, T, Y, PW, N0)
      DO 10 I = 1,NSQ
 10     PW(I) = PW(I)*CON
      GO TO 60
C  IF MITER = 2, MAKE N CALLS TO DIFFUN TO APPROXIMATE J.---------------
 20   D = 0.0
      DO 30 I = 1,N
 30     D = D + SAVE2(I)**2
      R0 = DABS(H)*DSQRT(D)*1.0D3 *UROUND
      J1 = 0
      DO 50 J = 1,N
        YJ = Y(J,1)
        R = EPSJ*YMAX(J)
        R = DMAX1(R,R0)
        Y(J,1) = Y(J,1) + R
        D = CON/R
        CALL DIFFUN (N, T, Y, SAVE1)
        DO 40 I = 1,N
 40       PW(I+J1) = (SAVE1(I) - SAVE2(I))*D
        Y(J,1) = YJ
        J1 = J1 + N0
 50     CONTINUE
C  ADD IDENTITY MATRIX.-------------------------------------------------
 60   J = 1
      DO 70 I = 1,N
        PW(J) = PW(J) + 1.0
 70     J = J + (N0 + 1)
C  DO LU DECOMPOSITION ON P.--------------------------------------------
      CALL DEC (N, N0, PW, IPIV, IER)
      RETURN
C----------------------- END OF SUBROUTINE PSET ------------------------
      END
      SUBROUTINE DEC (N, NDIM, A, IP, IER)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION A(NDIM,N), IP(N)
      SAVE
C-----------------------------------------------------------------------
C  MATRIX TRIANGULARIZATION BY GAUSSIAN ELIMINATION.
C  INPUT..
C     N = ORDER OF MATRIX.
C     NDIM = DECLARED DIMENSION OF ARRAY  A .
C     A = MATRIX TO BE TRIANGULARIZED.
C  OUTPUT..
C     A(I,J), I.LE.J = UPPER TRIANGULAR FACTOR, U .
C     A(I,J), I.GT.J = MULTIPLIERS = LOWER TRIANGULAR FACTOR, I - L.
C     IP(K), K.LT.N = INDEX OF K-TH PIVOT ROW.
C     IP(N) = (-1)**(NUMBER OF INTERCHANGES) OR O .
C     IER = 0 IF MATRIX A IS NONSINGULAR, OR K IF FOUND TO BE
C           SINGULAR AT STAGE K.
C  USE  SOL  TO OBTAIN SOLUTION OF LINEAR SYSTEM.
C  DETERM(A) = IP(N)*A(1,1)*A(2,2)*...*A(N,N).
C  IF IP(N)=O, A IS SINGULAR, SOL WILL DIVIDE BY ZERO.
C
C  REFERENCE..
C     C. B. MOLER, ALGORITHM 423, LINEAR EQUATION SOLVER,
C     C.A.C.M. 15 (1972), P. 274.
C-----------------------------------------------------------------------
      IER = 0
      IP(N) = 1
      IF (N .EQ. 1) GO TO 70
      NM1 = N - 1
      DO 60 K = 1,NM1
        KP1 = K + 1
        M = K
        DO 10 I = KP1,N
 10       IF (DABS(A(I,K)) .GT. DABS(A(M,K))) M = I
        IP(K) = M
        T = A(M,K)
        IF (M .EQ. K) GO TO 20
        IP(N) = -IP(N)
        A(M,K) = A(K,K)
        A(K,K) = T
 20     IF (T .EQ. 0.0 ) GO TO 80
        T = 1.0 /T
        DO 30 I = KP1,N
 30       A(I,K) = -A(I,K)*T
        DO 50 J = KP1,N
          T = A(M,J)
          A(M,J) = A(K,J)
          A(K,J) = T
          IF (T .EQ. 0.0 ) GO TO 50
          DO 40 I = KP1,N
 40         A(I,J) = A(I,J) + A(I,K)*T
 50       CONTINUE
 60     CONTINUE
 70   K = N
      IF (A(N,N) .EQ. 0.0 ) GO TO 80
      RETURN
 80   IER = K
      IP(N) = 0
      RETURN
C----------------------- END OF SUBROUTINE DEC -------------------------
      END
      SUBROUTINE SOL (N, NDIM, A, B, IP)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION A(NDIM,N), B(N), IP(N)
      SAVE
C-----------------------------------------------------------------------
C  SOLUTION OF LINEAR SYSTEM, A*X = B .
C  INPUT..
C    N = ORDER OF MATRIX.
C    NDIM = DECLARED DIMENSION OF ARRAY  A .
C    A = TRIANGULARIZED MATRIX OBTAINED FROM DEC.
C    B = RIGHT HAND SIDE VECTOR.
C    IP = PIVOT VECTOR OBTAINED FROM DEC.
C  DO NOT USE IF DEC HAS SET IER .NE. 0.
C  OUTPUT..
C    B = SOLUTION VECTOR, X .
C-----------------------------------------------------------------------
      IF (N .EQ. 1) GO TO 50
      NM1 = N - 1
      DO 20 K = 1,NM1
        KP1 = K + 1
        M = IP(K)
        T = B(M)
        B(M) = B(K)
        B(K) = T
        DO 10 I = KP1,N
 10       B(I) = B(I) + A(I,K)*T
 20     CONTINUE
      DO 40 KB = 1,NM1
        KM1 = N - KB
        K = KM1 + 1
        B(K) = B(K)/A(K,K)
        T = -B(K)
        DO 30 I = 1,KM1
 30       B(I) = B(I) + A(I,K)*T
 40     CONTINUE
 50   B(1) = B(1)/A(1,1)
      RETURN
C----------------------- END OF SUBROUTINE SOL -------------------------
      END
C
C
      SUBROUTINE PEDERV(N,Z,Y,PD,N0)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION Y(N),PD(N0,N0)
      SAVE
      RETURN
      END

